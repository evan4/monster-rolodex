{"version":3,"sources":["components/card/Card.js","components/card-list/CardList.js","components/search-box/SearchBox.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","monster","name","href","email","CardList","monsters","map","key","id","SearchBox","handleChange","type","onChange","App","state","searchField","search","bind","searchResult","fetch","then","res","json","users","setState","e","this","target","value","length","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+WAGe,SAASA,EAAKC,GAC3B,OACE,yBAAKC,UAAU,kBACb,4BAAKD,EAAME,QAAQC,MACnB,2BACE,uBAAGC,KAAI,iBAAYJ,EAAME,QAAQG,QAAUL,EAAME,QAAQG,SCHlD,SAASC,EAASN,GAC/B,OACE,yBAAKC,UAAU,aACdD,EAAMO,SAASC,KAAI,SAAAN,GAAO,OAAI,kBAACH,EAAD,CAAMU,IAAKP,EAAQQ,GAAIR,QAASA,Q,MCLpD,SAASS,EAAT,GAAoC,IAAhBC,EAAe,EAAfA,aAEjC,OACE,2BAAOX,UAAU,SACjBY,KAAK,SAASC,SAAUF,I,ICFPG,E,YACnB,aAAc,IAAD,8BACX,+CACKC,MAAQ,CACXT,SAAU,GACVU,YAAa,IAEf,EAAKC,OAAS,EAAKA,OAAOC,KAAZ,gBACd,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAPT,E,iFAUO,IAAD,OACjBE,MAAM,eACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAACnB,SAAUkB,S,6BAGrCE,GAAG,IAAD,OACPC,KAAKF,SAAS,CAACT,YAAaU,EAAEE,OAAOC,QAAQ,kBAAM,EAAKV,oB,qCAG3C,IAAD,EACoBQ,KAAKZ,MAA9BT,EADK,EACLA,SAAUU,EADL,EACKA,YACjB,OAAGA,EAAYc,OACNxB,EAASyB,QAAO,SAAA9B,GACrB,OAAOA,EAAQC,KAAK8B,cAAcC,SAASjB,EAAYgB,kBAGpD1B,I,+BAIP,OACE,yBAAKN,UAAU,OACb,gDACA,kBAACU,EAAD,CAAWC,aAAcgB,KAAKV,SAC7BU,KAAKR,eAAeW,OAAS,kBAACzB,EAAD,CAAUC,SAAUqB,KAAKR,iBAAoB,+C,GApClDe,aCObC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,MAAK,SAAA0B,GACjCA,EAAaC,kB","file":"static/js/main.45396c7a.chunk.js","sourcesContent":["import React from 'react'\nimport'./029 card.styles.css'\n\nexport default function Card(props) {\n  return (\n    <div className=\"card-container\">\n      <h2>{props.monster.name}</h2>\n      <p>\n        <a href={`mailto:${props.monster.email}`}>{props.monster.email}</a>\n      </p>\n    </div>\n  )\n}\n","import React from 'react'\nimport './028 card-list.styles.css';\n\nimport Card from '../card/Card'\n\nexport default function CardList(props) {\n  return (\n    <div className=\"card-list\">\n   { props.monsters.map(monster => <Card key={monster.id} monster={monster}/>)}\n    </div>\n  )\n}\n","import React from 'react'\nimport './search-box.styles.css'\n\nexport default function SearchBox({handleChange}) {\n\n  return (\n    <input className=\"search\"\n    type=\"search\" onChange={handleChange}/>\n  )\n}\n","import React, { Component } from 'react'\nimport './App.css'\nimport CardList from './components/card-list/CardList'\nimport SearchBox from './components/search-box/SearchBox';\n\nexport default class App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      monsters: [],\n      searchField: ''\n    }\n    this.search = this.search.bind(this);\n    this.searchResult = this.searchResult.bind(this);\n  }\n\n  componentDidMount(){\n    fetch('./data.json')\n      .then(res => res.json())\n      .then(users => this.setState({monsters: users}) )\n  }\n\n  search(e){\n    this.setState({searchField: e.target.value}, () => this.searchResult())\n  }\n\n  searchResult(){\n    const {monsters, searchField} = this.state;\n    if(searchField.length) {\n      return monsters.filter(monster =>  {\n        return monster.name.toLowerCase().includes(searchField.toLowerCase())\n      })\n    }\n    return monsters\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBox handleChange={this.search} />\n        {this.searchResult().length ? <CardList monsters={this.searchResult()}/> : <h1>No matches</h1>}\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}